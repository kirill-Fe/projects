<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Heavy Load Test</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background: #000;
        }
        .particle {
            position: absolute;
            border-radius: 50%;
            pointer-events: none;
        }
        .matrix-rain {
            position: fixed;
            top: 0;
            left: 0;
            color: #0f0;
            font-family: monospace;
            font-size: 16px;
            line-height: 16px;
            writing-mode: vertical-rl;
            text-orientation: mixed;
            height: 100vh;
            overflow: hidden;
        }
        .webgl-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <canvas id="webgl" class="webgl-canvas"></canvas>
    <div id="matrix-container" class="matrix-rain"></div>
    <div id="dom-stress"></div>

    <script>
        // 1. WebGL интенсивная нагрузка на GPU
        function initWebGL() {
            const canvas = document.getElementById('webgl');
            const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');
            
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            
            const vertices = [];
            const colors = [];
            
            // Генерируем 1 миллион вершин
            for (let i = 0; i < 1000000; i++) {
                vertices.push(Math.random() * 2 - 1, Math.random() * 2 - 1, 0);
                colors.push(Math.random(), Math.random(), Math.random(), 1);
            }
            
            // Создаем буферы
            const vertexBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
            
            const colorBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
            
            // Шейдеры
            const vertShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertShader, `
                attribute vec3 position;
                attribute vec4 color;
                varying vec4 vColor;
                void main() {
                    gl_Position = vec4(position, 1.0);
                    gl_PointSize = 2.0;
                    vColor = color;
                }
            `);
            gl.compileShader(vertShader);
            
            const fragShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragShader, `
                precision highp float;
                varying vec4 vColor;
                void main() {
                    gl_FragColor = vColor;
                }
            `);
            gl.compileShader(fragShader);
            
            const program = gl.createProgram();
            gl.attachShader(program, vertShader);
            gl.attachShader(program, fragShader);
            gl.linkProgram(program);
            gl.useProgram(program);
            
            // Атрибуты
            const positionAttrib = gl.getAttribLocation(program, 'position');
            gl.enableVertexAttribArray(positionAttrib);
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
            gl.vertexAttribPointer(positionAttrib, 3, gl.FLOAT, false, 0, 0);
            
            const colorAttrib = gl.getAttribLocation(program, 'color');
            gl.enableVertexAttribArray(colorAttrib);
            gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
            gl.vertexAttribPointer(colorAttrib, 4, gl.FLOAT, false, 0, 0);
            
            // Анимация
            function animate() {
                gl.clear(gl.COLOR_BUFFER_BIT);
                gl.drawArrays(gl.POINTS, 0, vertices.length / 3);
                
                // Изменяем данные для постоянного обновления буферов
                for (let i = 0; i < vertices.length; i++) {
                    vertices[i] += (Math.random() - 0.5) * 0.01;
                }
                gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
                
                requestAnimationFrame(animate);
            }
            
            animate();
        }

        // 2. Матричный дождь (нагрузка на CPU и DOM)
        function initMatrixRain() {
            const container = document.getElementById('matrix-container');
            const chars = "日ﾊﾐﾋｰｳｼﾅﾓﾆｻﾜﾂｵﾘｱﾎﾃﾏｹﾒｴｶｷﾑﾕﾗｾﾈｽﾀﾇﾍ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            const columns = Math.floor(window.innerWidth / 16);
            const drops = [];
            
            for (let i = 0; i < columns; i++) {
                drops[i] = Math.floor(Math.random() * -100);
            }
            
            function rain() {
                let output = '';
                
                for (let i = 0; i < drops.length; i++) {
                    output += `<div style="opacity: ${Math.random()}">${chars[Math.floor(Math.random() * chars.length)]}</div>`;
                    drops[i]++;
                    
                    if (drops[i] * 16 > window.innerHeight && Math.random() > 0.975) {
                        drops[i] = 0;
                    }
                }
                
                container.innerHTML = output;
                requestAnimationFrame(rain);
            }
            
            rain();
        }

        // 3. Генерация тысяч DOM элементов с анимацией
        function initDomStress() {
            const container = document.getElementById('dom-stress');
            
            for (let i = 0; i < 5000; i++) {
                const el = document.createElement('div');
                el.className = 'particle';
                el.style.width = `${Math.random() * 20 + 5}px`;
                el.style.height = el.style.width;
                el.style.left = `${Math.random() * 100}vw`;
                el.style.top = `${Math.random() * 100}vh`;
                el.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 50%)`;
                container.appendChild(el);
            }
            
            const particles = document.querySelectorAll('.particle');
            
            function animateParticles() {
                particles.forEach(particle => {
                    const x = parseFloat(particle.style.left) + (Math.random() - 0.5) * 2;
                    const y = parseFloat(particle.style.top) + (Math.random() - 0.5) * 2;
                    
                    particle.style.left = `${x}vw`;
                    particle.style.top = `${y}vh`;
                    particle.style.transform = `rotate(${Math.random() * 360}deg) scale(${Math.random() + 0.5})`;
                });
                
                requestAnimationFrame(animateParticles);
            }
            
            animateParticles();
        }

        // 4. Интенсивные вычисления в Web Workers
        function initWebWorkers() {
            const workerCount = navigator.hardwareConcurrency || 4;
            
            for (let i = 0; i < workerCount * 2; i++) {
                const workerCode = `
                    function heavyCompute() {
                        let total = 0;
                        for (let i = 0; i < 100000000; i++) {
                            total += Math.sqrt(i) * Math.sin(i) * Math.cos(i);
                        }
                        return total;
                    }
                    
                    setInterval(() => {
                        heavyCompute();
                        postMessage('Worker ${i} completed cycle');
                    }, 100);
                `;
                
                const blob = new Blob([workerCode], {type: 'application/javascript'});
                const worker = new Worker(URL.createObjectURL(blob));
                worker.onmessage = (e) => console.log(e.data);
            }
        }

        // 5. Заполнение памяти большими массивами
        function fillMemory() {
            const hugeArrays = [];
            
            function createHugeArray() {
                const size = 10000000; // 10 миллионов элементов
                const arr = new Array(size);
                
                for (let i = 0; i < size; i++) {
                    arr[i] = {
                        id: i,
                        data: new Array(100).fill(Math.random().toString(36).substring(2)),
                        timestamp: Date.now()
                    };
                }
                
                hugeArrays.push(arr);
                
                if (hugeArrays.length < 10) {
                    setTimeout(createHugeArray, 1000);
                }
            }
            
            createHugeArray();
        }

        // Запуск всех нагрузочных тестов
        window.onload = function() {
            try { initWebGL(); } catch(e) { console.error('WebGL failed:', e); }
            initMatrixRain();
            initDomStress();
            initWebWorkers();
            fillMemory();
            
            // Дополнительная CPU нагрузка в основном потоке
            setInterval(() => {
                let result = 0;
                for (let i = 0; i < 1000000; i++) {
                    result += Math.sqrt(i) * Math.tan(i);
                }
                console.log('CPU load result:', result);
            }, 100);
        };
    </script>
</body>
</html>